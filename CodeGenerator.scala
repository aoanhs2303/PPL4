/**
 *	@author Nguyen Hua Phung
 *	@version 1.0
 *	23/10/2015
 * 	This file provides a simple version of code generator
 *

 */

package mc.codegen





import mc.checker._
import mc.utils._
import java.io.{PrintWriter, File}


object CodeGenerator extends Utils {
  val libName = "io"
  def init() = List( Symbol("getInt",FunctionType(List(),IntType),CName(libName)),
                     Symbol("putInt",FunctionType(List(IntType),VoidType),CName(libName)),
                     Symbol("putIntLn",FunctionType(List(IntType),VoidType),CName(libName))
                    )
    
  
	def gen(ast:AST,dir:File) = {

    val gl = init()     
		val gc = new CodeGenVisitor(ast,gl,dir)    
		gc.visit(ast, null);   
	}
}




case class ClassType(cname:String) extends Type



//case class SubContext(emit:Emitter,decl:List[Decl]) 
case class SubBody(frame:Frame,sym:List[Symbol]) 

class Access(val frame:Frame,val sym:List[Symbol],val isLeft:Boolean,val isFirst:Boolean)

trait Val
  case class Index(value:Int) extends Val
  case class CName(value:String) extends Val





class CodeGenVisitor(astTree:AST,env:List[Symbol],dir:File) extends BaseVisitor with Utils {
	
  val className = "MCClass"
  val path = dir.getPath()
  val emit = new Emitter(path+"/"+className+".j")

   override def visitProgram(ast:Program,c:Any) = {
      
      
      emit.printout(emit.emitPROLOG(className, "java.lang.Object"))    
      //ast.decl.foldLeft()((e,x) => visit(x,e).asInstanceOf[SubBody]) 
      
      //val symlis 

      ast.decl.filter(_.isInstanceOf[FuncDecl]).map(visit(_,SubBody(null,env)))
      // generate default constructor 
      genMETHOD(
            FuncDecl(Id("<init>"),List(),null,Block(List(),List())),c,new Frame("<init>",VoidType))
      emit.emitEPILOG()  
  }
  
 

    /** generate code for default constructor 

   *  @param consdecl the function declaration whose code will be generated by this method
   *  @param frame the frame where the initialization happen 
   *  @param o the referencing environment
   */
  def genMETHOD(consdecl:FuncDecl,o:Any,frame:Frame) = {
    
    val isInit = consdecl.returnType == null
    val isMain = consdecl.name.name == "main" && consdecl.param.length == 0 && consdecl.returnType == VoidType
    val returnType = if (isInit) VoidType else consdecl.returnType
    val methodName = if (isInit) "<init>" else consdecl.name.name
    val intype = if (isMain) List(ArrayPointerType(StringType)) else List()
    val mtype =  FunctionType(intype,returnType)
    
    emit.printout(emit.emitMETHOD(methodName, mtype, !isInit, frame))

    frame.enterScope(true);
    
    val glenv = o.asInstanceOf[List[Symbol]]

    // Generate code for parameter declarations
    if (isInit) emit.printout(emit.emitVAR(frame.getNewIndex,"this",ClassType(className),frame.getStartLabel,frame.getEndLabel,frame))
    else if (isMain) emit.printout(emit.emitVAR(frame.getNewIndex,"args",ArrayPointerType(StringType),frame.getStartLabel,frame.getEndLabel,frame))
    // else {
    //   ast.param.map(_.visit(,null))
    // }

    val body = consdecl.body.asInstanceOf[Block]
    emit.printout(emit.emitLABEL(frame.getStartLabel(),frame))
    
    //Generate code for statements
    if (isInit) {
      emit.printout(emit.emitREADVAR("this",ClassType(className),0,frame))
      emit.printout(emit.emitINVOKESPECIAL(frame))
    }
    
    //visit(ast.body,new Access(frame,glenv,false,true))
    body.stmt.map(x=>visit(x,SubBody(frame,glenv)))
    
    emit.printout(emit.emitLABEL(frame.getEndLabel(),frame))
    if (returnType == VoidType) emit.printout(emit.emitRETURN(VoidType,frame));
    emit.printout(emit.emitENDMETHOD(frame));
    frame.exitScope();
    
    
  }
  override def visitFuncDecl(ast:FuncDecl,o:Any) = {
    val subctxt = o.asInstanceOf[SubBody]
    val frame = new Frame(ast.name.name,ast.returnType)
    genMETHOD(ast,subctxt.sym,frame)
    SubBody(null,Symbol(ast.name.name,FunctionType(List(),ast.returnType),CName(className))::subctxt.sym)
  }
  
  override def visitBlock(ast:Block,o:Any) = {
    val sub = o.asInstanceOf[Access]
    val frame = sub.frame
    val sym = sub.sym
    val isFirst = sub.isFirst

    if(!isFirst) frame.enterScope(false)
    emit.printout(emit.emitLABEL(frame.getStartLabel(),frame))

    ast.decl.map(visit(_,null))

    ast.stmt.map(visit(_,null))
    emit.printout(emit.emitLABEL(frame.getEndLabel(),frame))
    if(!isFirst) frame.exitScope()
  }

  override def visitVarDecl(ast:VarDecl,o:Any) = {


  }

  
  override def visitCallExpr(ast:CallExpr,o:Any) = {
    val ctxt = o.asInstanceOf[SubBody]
    val frame = ctxt.frame
    val nenv = ctxt.sym
    val sym = lookup(ast.method.name,nenv,(x:Symbol)=>x.name).get
    val cname = sym.value.asInstanceOf[CName].value
    val ctype = sym.typ

    val in = ast.params.foldLeft(("",List[Type]()))((y,x)=>
      {
        val (str1,typ1) = visit(x,new Access(frame,nenv,false,true)).asInstanceOf[(String,Type)]
        (y._1 + str1,y._2 :+ typ1)
      }
    )
    emit.printout(in._1)
    
    emit.printout(emit.emitINVOKESTATIC(cname+"/"+ast.method.name,ctype,frame))
             
    
  }

  override def visitIntLiteral(ast:IntLiteral,o:Any) = {
    val ctxt = o.asInstanceOf[Access]
    val frame = ctxt.frame
    (emit.emitPUSHICONST(ast.value, frame),IntType)
  }
  
}